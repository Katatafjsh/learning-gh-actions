# One self-hosted runner can only run one job at a time, when no available runners are idle, the subsequent jobs will be in queueing until available
# Each job step resets the working path to GITHUB_WORKSPACE, which will be the root of your repository after actions/checkout runs.

name: Prod

concurrency: 
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  debug:
    runs-on: ["self-hosted", "linux", "x64"]
    steps:

    - name: Print environment
      run: |
        echo "CI: $CI"
        echo "GITHUB_ACTION: $GITHUB_ACTION"
        echo "GITHUB_ACTION_PATH: $GITHUB_ACTION_PATH"
        echo "GITHUB_ACTION_REPOSITORY: $GITHUB_ACTION_REPOSITORY"
        echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR: $GITHUB_ACTOR"
        echo "GITHUB_API_URL: $GITHUB_API_URL"
        echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
        echo "GITHUB_ENV: $GITHUB_ENV"
        echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH"
        echo "GITHUB_GRAPHQL_URL: $GITHUB_GRAPHQL_URL"
        echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
        echo "GITHUB_JOB: $GITHUB_JOB"
        echo "GITHUB_PATH: $GITHUB_PATH"
        echo "GITHUB_REF: $GITHUB_REF"
        echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
        echo "GITHUB_REF_PROTECTED: $GITHUB_REF_PROTECTED"
        echo "GITHUB_REF_TYPE: $GITHUB_REF_TYPE"
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_REPOSITORY_OWNER: $GITHUB_REPOSITORY_OWNER"
        echo "GITHUB_RETENTION_DAYS: $GITHUB_RETENTION_DAYS"
        echo "GITHUB_RUN_ATTEMPT: $GITHUB_RUN_ATTEMPT"
        echo "GITHUB_RUN_ID: $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER"
        echo "GITHUB_SERVER_URL: $GITHUB_SERVER_URL"
        echo "GITHUB_SHA: $GITHUB_SHA"
        echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "RUNNER_ARCH: $RUNNER_ARCH"
        echo "RUNNER_NAME: $RUNNER_NAME"
        echo "RUNNER_OS: $RUNNER_OS"
        echo "RUNNER_TEMP: $RUNNER_TEMP"
        echo "RUNNER_TOOL_CACHE: $RUNNER_TOOL_CACHE"

        echo "github.event_name: ${{ github.event_name }}"
        echo "github.event.pull_request.action: ${{ github.event.pull_request.action }}"
        echo "github.event.pull_request.merged: ${{ github.event.pull_request.merged }}"
        echo "github.event.pull_request.base.ref: ${{ github.event.pull_request.base.ref }}"
        echo "github.event.pull_request.base.sha: ${{ github.event.pull_request.base.sha }}"
        echo "github.event.base_ref: ${{ github.event.base_ref }}"
        echo "github.event.before: ${{ github.event.before }}"

  build:
    runs-on: ["self-hosted", "linux", "x64"]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Build
      run: |
        go build -v ./...
        ls -alh
        
    - name: Timestamp
      run: | 
        echo "Build job: $(date)" >> timestamp.txt

  test1:
    needs: ["build"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: github.event_name != 'pull_request'
    steps:
    - name: Grep hello
      run: |
        ./go-hello | grep hello

    - name: Timestamp
      run: |
        echo "Test job 1: $(date)" >> timestamp.txt

  test2:
    needs: ["build"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: github.event_name != 'pull_request'
    steps:
    - name: Grep hello
      run: |
        ./go-hello | grep world

    - name: Timestamp
      run: |
        echo "Test job 2: $(date)" >> timestamp.txt

  test3:
    needs: ["build"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: github.event_name != 'pull_request'
    steps:
    - name: Grep hello
      continue-on-error: true
      run: |
        ./go-hello | grep crabpeople

    - name: Timestamp
      run: |
        echo "Test job 3: $(date)" >> timestamp.txt

  success_or_error:
    needs: ["build"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: github.event_name != 'pull_request'
    steps:

    - name: Exit
      if: contains(github.event.head_commit.message, '[error]')
      run: |
        exit 1;

  archive:
    needs: ["build", "test1", "test2", "test3", "success_or_error"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: ${{ always() && github.event_name == 'pull_request' }}
    steps:
    
    - name: Timestamp
      run: |
        echo "Archive job: $(date)" >> timestamp.txt

    - name: Set sha value
      run: |
        echo "ARTIFACT_NAME=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          go-hello
          timestamp.txt
  
  download-archive:
    needs: ["build", "test1", "test2", "test3", "success_or_error", "archive"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: ${{ always() && github.event_name == 'push' }}
    steps:
    
    - uses: actions/checkout@v2
    
    - uses: dawidd6/action-download-artifact@v2
      with:
        workflow: master.yml
        name: ${{ github.event.before }} # Previous sha
        commit: ${{github.event.pull_request.head.sha}} # Identify artifact between different workflows
        
    - name: Display structure of downloaded files
      run: ls -R

  runner-cleanup: 
    needs: ["build", "test1", "test2", "test3", "archive", "success_or_error", "download-archive"]
    runs-on: ["self-hosted", "linux", "x64"]
    if: always()
    steps:
    - name: Workdir cleanup
      run : |
        rm -rf ${GITHUB_WORKSPACE} 

